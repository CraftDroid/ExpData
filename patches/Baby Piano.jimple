import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences$Editor;
import android.content.res.Resources;
import android.content.res.Resources$Theme;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory$Options;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.ColorFilter;
import android.graphics.LightingColorFilter;
import android.graphics.LinearGradient;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Paint$Align;
import android.graphics.RectF;
import android.graphics.Shader;
import android.graphics.Shader$TileMode;
import android.graphics.drawable.Drawable;
import android.media.AudioManager;
import android.media.SoundPool;
import android.net.Uri;
import android.os.Build$VERSION;
import android.os.Process;
import android.os.Vibrator;
import android.util.Log;
import android.util.SparseArray;
import android.widget.Button;
import android.widget.LinearLayout;
import com.blackdevelopers.babypiano.API_PubliOptimizada;
import com.blackdevelopers.babypiano.CommonResources;
import com.blackdevelopers.babypiano.DibuNota;
import com.blackdevelopers.babypiano.MainActivity;
import com.blackdevelopers.babypiano.Piano;
import java.lang.Exception;
import java.lang.Math;
import java.lang.Object;
import java.lang.OutOfMemoryError;
import java.lang.String;
import java.lang.StringBuilder;
import java.lang.System;
import java.util.Random;
import android.content.Activity;
import android.content.pm.PackageManager;
import android.content.ComponentName;

public class com.blackdevelopers.babypiano.CommonResources extends Object
{
  private static Context mContext;

  public static Bitmap brillo2;

  public static Bitmap brillo;

  public static Bitmap[] dibuNotas;

  public static ColorFilter pressedFilter;

  public static LinearGradient shader;

  public static Paint pincel0;

  public static Paint pincel1;

  public static Paint pincelGradiente;

  public static Paint pincelNormal;

  public static Paint pincelTrans;

  public static RectF gradientRect;

  public static AudioManager aMgr;

  public static SoundPool sp;

  @Signature(Value="Landroid/util/SparseArray<Landroid/graphics/PointF;>;")
  public static SparseArray mActivePointers;

  public static Button btnGetOther;

  public static Button btnImagenAlt;

  public static Button btnPurchase;

  public static Button btnShareApp;

  public static Button btnVibrationOFF;

  public static Button btnVibrationON;

  public static Button[] btnTeclas;

  public static LinearLayout layoutmenu;

  public static boolean canShowPurchaseButton;

  public static boolean displayingMenu;

  public static boolean initDone;

  public static boolean isGooglePlayVersion;

  public static boolean vibrationEnabled;

  public static boolean[] soundLoaded;

  public static boolean[] teclaPulsada;

  public static boolean[] teclaPulsadaPrev;

  public static DibuNota[] objetosNotas;

  public static Piano[] pianos;

  public static float centroBrillo2;

  public static float centroBrillo;

  public static float despDibuNota;

  public static float ladoDibuNota;

  public static final float multNotas = 1.6666666F;

  public static float posYteclas;

  public static float startyDibuNota;

  public static float tamAltoTeclaMin;

  public static float tamAnchoTeclaMin;

  public static float[] ultimaPosTeclaX;

  public static float[] ultimaPosTeclaY;

  public static int animAlpha;

  public static int backCounter;

  public static int idPianoActivo;

  public static final int maxDibuNotas = 10;

  public static final int maxDibus = 5;

  public static final int maxTeclas = 8;

  public static int pHeight;

  public static int pWidth;

  public static int textAnimStep;

  public static int turnoDibuNota;

  public static int[] coloresNotas;

  public static int[] sonido_notas;

  private static final String LOCAL_SAVENAME = "BlackDevelopers_BabyPiano";

  private static final String TAG = "CommonResources";

  public static String currentAnimText;

  public static String txtBack1;

  public static String txtBack2;

  public static long deVueltaDeUnAd;

  public static long displayOrderTime;

  public static long[] ultimoIntentoSonido;

  public static Bitmap getCorrectResizedBitmap(Bitmap $param0, float $param1, float $param2)
  {
    int $int_Method_getWidth, $int_Method_getHeight;
    float $f2;
    Matrix $Matrix;
    
      if $param0 != null goto label0;
      return null;

  label0:
      $int_Method_getWidth = virtualinvoke $param0.getWidth();
      $int_Method_getHeight = virtualinvoke $param0.getHeight();
      $f2 = (float) $int_Method_getWidth;
      $param1 = $param1 / $f2;
      $f2 = (float) $int_Method_getHeight;
      $param2 = $param2 / $f2;
      $Matrix = new Matrix;
      specialinvoke $Matrix.<Matrix: void <init>()>();
      virtualinvoke $Matrix.<Matrix: boolean postScale(float, float)>($param1, $param2);
      $param0 = staticinvoke <Bitmap: Bitmap createBitmap(Bitmap, int, int, int, int, Matrix, boolean)>($param0, 0, 0, $int_Method_getWidth, $int_Method_getHeight, $Matrix, false);
      return $param0;
  }

  public static Bitmap getExactSizeBitmapFromResource(int $param0, float $param1, float $param2)
  {
    BitmapFactory$Options $BitmapFactory_Options;
    Context $Context;
    Resources $Resources;
    int $int, $int_Method_round;
    Bitmap $Bitmap;
    
      $BitmapFactory_Options = new BitmapFactory$Options;
      specialinvoke $BitmapFactory_Options.<BitmapFactory$Options: void <init>()>();
      $BitmapFactory_Options.<BitmapFactory$Options: boolean inJustDecodeBounds> = true;
      $Context = <CommonResources: Context mContext>;
      $Resources = virtualinvoke $Context.getResources();
      staticinvoke <BitmapFactory: Bitmap decodeResource(Resources, int, BitmapFactory$Options)>($Resources, $param0, $BitmapFactory_Options);
      $int = staticinvoke Math.round($param1);
      $int_Method_round = staticinvoke Math.round($param2);
      $int = staticinvoke CommonResources.calculateInSampleSize($BitmapFactory_Options, $int, $int_Method_round);
      $BitmapFactory_Options.<BitmapFactory$Options: int inSampleSize> = $int;
      $BitmapFactory_Options.<BitmapFactory$Options: boolean inJustDecodeBounds> = false;
      $Context = <CommonResources: Context mContext>;
      $Resources = virtualinvoke $Context.getResources();
      $Bitmap = staticinvoke BitmapFactory.decodeResource($Resources, $param0, $BitmapFactory_Options);
      $Bitmap = staticinvoke CommonResources.getCorrectResizedBitmap($Bitmap, $param1, $param2);
      return $Bitmap;
  }

  private static int calculateInSampleSize(BitmapFactory$Options $param0, int $param1, int $param2)
  {
    int $int, $int_1, $int_2, $int_3;
    
      $int = $param0.<BitmapFactory$Options: int outHeight>;
      $int_1 = $param0.<BitmapFactory$Options: int outWidth>;
      $int_2 = 1;
      if $int > $param2 goto label0;
      if $int_1 <= $param1 goto label2;

  label0:
      $int = $int / 2;
      $int_1 = $int_1 / 2;

  label1:
      $int_3 = $int / $int_2;
      if $int_3 <= $param2 goto label3;
      $int_3 = $int_1 / $int_2;
      if $int_3 <= $param1 goto label3;
      $int_2 = $int_2 * 2;
      goto label1;

  label2:
      return 1;

  label3:
      return $int_2;
  }

  public static int getColor(Context $param0, int $param1)
  {
    int $int_Field_SDK_INT;
    
      $int_Field_SDK_INT = <Build$VERSION: int SDK_INT>;
      if $int_Field_SDK_INT < 23 goto label0;
      $param1 = staticinvoke CommonResources.getColorNew($param0, $param1);
      return $param1;

  label0:
      $param1 = staticinvoke CommonResources.getColorOld($param0, $param1);
      return $param1;
  }

  @Visibility(retention="SOURCE", annotations= { element = @android.'annotation'.TargetApi(
value=23)
 })
  public static int getColorNew(Context $param0, int $param1)
  {
    Resources $Resources_Method_getResources;
    
      $Resources_Method_getResources = virtualinvoke $param0.getResources();
      $param1 = virtualinvoke $Resources_Method_getResources.<Resources: int getColor(int, Resources$Theme)>($param1, null);
      return $param1;
  }

  public static int getColorOld(Context $param0, int $param1)
  {
    Resources $Resources_Method_getResources;
    
      $Resources_Method_getResources = virtualinvoke $param0.getResources();
      $param1 = virtualinvoke $Resources_Method_getResources.getColor($param1);
      return $param1;
  }

  public static int randomBetween(int $param0, int $param1)
  {
    Random $Random;
    int $int;
    
      $Random = new Random;
      specialinvoke $Random.<Random: void <init>()>();
      $int = $param1 + 1;
      $int = virtualinvoke $Random.nextInt($int);
      $param0 = $int + $param0;
      if $param0 <= $param1 goto label0;
      return $param1;

  label0:
      return $param0;
  }

  static void <clinit>()
  {
    boolean[] $arrboolean;
    long[] $arrlong;
    int[] $arrint;
    float[] $arrfloat;
    Piano[] $arrPiano;
    Bitmap[] $arrBitmap;
    DibuNota[] $arrDibuNota;
    int $int;
    Button[] $arrButton;
    
      <CommonResources: SparseArray mActivePointers> = null;
      <CommonResources: Button btnImagenAlt> = null;
      <CommonResources: Button btnGetOther> = null;
      <CommonResources: boolean canShowPurchaseButton> = true;
      <CommonResources: AudioManager aMgr> = null;
      $arrboolean = newarray (boolean)[8];
      <CommonResources: boolean[] soundLoaded> = $arrboolean;
      $arrlong = newarray (long)[8];
      <CommonResources: long[] ultimoIntentoSonido> = $arrlong;
      $arrint = newarray (int)[8];
      <CommonResources: int[] sonido_notas> = $arrint;
      <CommonResources: boolean initDone> = false;
      <CommonResources: Bitmap brillo> = null;
      <CommonResources: Bitmap brillo2> = null;
      <CommonResources: float tamAnchoTeclaMin> = 0.0F;
      <CommonResources: float tamAltoTeclaMin> = 0.0F;
      <CommonResources: int idPianoActivo> = 7;
      <CommonResources: Paint pincel0> = null;
      <CommonResources: Paint pincel1> = null;
      <CommonResources: Paint pincelNormal> = null;
      <CommonResources: Paint pincelTrans> = null;
      <CommonResources: int pWidth> = 0;
      <CommonResources: int pHeight> = 0;
      <CommonResources: float posYteclas> = 0.0F;
      $arrboolean = newarray (boolean)[8];
      <CommonResources: boolean[] teclaPulsada> = $arrboolean;
      $arrboolean = newarray (boolean)[8];
      <CommonResources: boolean[] teclaPulsadaPrev> = $arrboolean;
      <CommonResources: long deVueltaDeUnAd> = 0L;
      $arrfloat = newarray (float)[8];
      <CommonResources: float[] ultimaPosTeclaX> = $arrfloat;
      $arrfloat = newarray (float)[8];
      <CommonResources: float[] ultimaPosTeclaY> = $arrfloat;
      $arrPiano = newarray (Piano)[8];
      <CommonResources: Piano[] pianos> = $arrPiano;
      <CommonResources: float centroBrillo> = 0.0F;
      <CommonResources: float centroBrillo2> = 0.0F;
      <CommonResources: int backCounter> = 0;
      <CommonResources: String txtBack1> = "";
      <CommonResources: String txtBack2> = "";
      <CommonResources: int textAnimStep> = 0;
      <CommonResources: String currentAnimText> = "";
      <CommonResources: int animAlpha> = 0;
      <CommonResources: boolean displayingMenu> = false;
      <CommonResources: LinearLayout layoutmenu> = null;
      <CommonResources: long displayOrderTime> = 0L;
      <CommonResources: RectF gradientRect> = null;
      <CommonResources: LinearGradient shader> = null;
      <CommonResources: Paint pincelGradiente> = null;
      $arrBitmap = newarray (Bitmap)[5];
      <CommonResources: Bitmap[] dibuNotas> = $arrBitmap;
      $arrDibuNota = newarray (DibuNota)[10];
      <CommonResources: DibuNota[] objetosNotas> = $arrDibuNota;
      <CommonResources: float ladoDibuNota> = 0.0F;
      <CommonResources: float despDibuNota> = 0.0F;
      <CommonResources: float startyDibuNota> = 0.0F;
      <CommonResources: int turnoDibuNota> = 0;
      $arrint = newarray (int)[8];
      $arrint[0] = -65281;
      $arrint[1] = -65536;
      $int = staticinvoke Color.rgb(255, 100, 0);
      $arrint[2] = $int;
      $arrint[3] = -256;
      $arrint[4] = -16711936;
      $arrint[5] = -16711681;
      $arrint[6] = -16776961;
      $int = staticinvoke Color.rgb(137, 4, 177);
      $arrint[7] = $int;
      <CommonResources: int[] coloresNotas> = $arrint;
      <CommonResources: boolean vibrationEnabled> = false;
      <CommonResources: ColorFilter pressedFilter> = null;
      <CommonResources: Button btnVibrationON> = null;
      <CommonResources: Button btnVibrationOFF> = null;
      $arrButton = newarray (Button)[8];
      <CommonResources: Button[] btnTeclas> = $arrButton;
      <CommonResources: Button btnPurchase> = null;
      <CommonResources: boolean isGooglePlayVersion> = true;
      <CommonResources: Button btnShareApp> = null;
  }

  public void <init>()
  {
    
      specialinvoke this.<Object: void <init>()>();
  }

  public static void animarTodosLosDibus(Canvas $param0)
  {
    int $int;
    DibuNota[] $arrDibuNota_Field_objetosNotas;
    DibuNota $DibuNota;
    Exception $Exception;
    boolean $z0;
    StringBuilder $StringBuilder;
    String $String;
    
      if $param0 != null goto label0;
      return;

  label0:
      $int = 0;

  label1:
      if $int >= 10 goto label6;
      $arrDibuNota_Field_objetosNotas = <CommonResources: DibuNota[] objetosNotas>;

  label2:
      $DibuNota = $arrDibuNota_Field_objetosNotas[$int];
      virtualinvoke $DibuNota.animar($param0);

  label3:
      $int = $int + 1;
      goto label1;

  label4:
      $Exception := @caughtexception;
      $z0 = <MainActivity: boolean finalMode>;
      if $z0 != 0 goto label5;
      $StringBuilder = new StringBuilder;
      specialinvoke $StringBuilder.<StringBuilder: void <init>()>();
      $StringBuilder = virtualinvoke $StringBuilder.append("Fallo al intentar mostrar dibu #");
      $String = staticinvoke String.valueOf($int);
      $StringBuilder = virtualinvoke $StringBuilder.append($String);
      $StringBuilder = virtualinvoke $StringBuilder.append(":");
      $String = virtualinvoke $Exception.toString();
      $StringBuilder = virtualinvoke $StringBuilder.append($String);
      $String = virtualinvoke $StringBuilder.toString();
      staticinvoke <Log: int e(String, String)>("CommonResources", $String);

  label5:
      staticinvoke CommonResources.doExit();
      goto label3;

  label6:
      return;

      catch Exception from label2 to label3 with label4;
  }

  public static void cStartSearchMoreApps(Context $param0)
  {
    long $long_Method_currentTimeMillis;
    boolean $z0;
    Activity $Activity;
    PackageManager $PackageManager;
    String $String;
    Intent $Intent;
    Uri $Uri_Method_parse;
    ComponentName $ComponentName;
    
      $long_Method_currentTimeMillis = staticinvoke System.currentTimeMillis();
      <CommonResources: long deVueltaDeUnAd> = $long_Method_currentTimeMillis;
      $z0 = <CommonResources: boolean isGooglePlayVersion>;
      if $z0 == 0 goto label1;
      $String = "market://search?q=blackdevelopers.net%20baby&utm_source=app&utm_medium=button&utm_campaign=piano";

  label0:
      $Intent = new Intent;
      $Uri_Method_parse = staticinvoke Uri.parse($String);
      specialinvoke $Intent.<Intent: void <init>(String, Uri)>("android.intent.action.VIEW", $Uri_Method_parse);
      $Activity = (Activity) $param0;
      $PackageManager = virtualinvoke $Activity.<Activity: PackageManager getPackageManager()>();
      $ComponentName = virtualinvoke $Intent.<Intent: ComponentName resolveActivity(PackageManager)>($PackageManager);
      if $ComponentName == null goto label2;
      virtualinvoke $param0.startActivity($Intent);
      
  label2:
      return;

  label1:
      $String = "http://blackdevelopers.net/?page_id=113";
      goto label0;
  }

  public static void cargarSonido(int $param0)
  {
    long $long_Method_currentTimeMillis, $long;
    long[] $arrlong;
    byte $b3;
    SoundPool $SoundPool;
    boolean $z0;
    int[] $arrint;
    Context $Context;
    
      $long_Method_currentTimeMillis = staticinvoke System.currentTimeMillis();
      $arrlong = <CommonResources: long[] ultimoIntentoSonido>;
      $long = $arrlong[$param0];
      $long = $long + 5000L;
      $b3 = $long cmp $long_Method_currentTimeMillis;
      if $b3 <= 0 goto label0;
      return;

  label0:
      $arrlong = <CommonResources: long[] ultimoIntentoSonido>;
      $arrlong[$param0] = $long_Method_currentTimeMillis;
      $SoundPool = <CommonResources: SoundPool sp>;
      if $SoundPool != null goto label1;
      $z0 = <MainActivity: boolean finalMode>;
      if $z0 != 0 goto label11;
      staticinvoke <Log: int e(String, String)>("CommonResources", "Error faltal en cargarSonido(): sp es NULL");
      return;

  label1:
      lookupswitch ($param0) {
      case 0: goto label3;
      case 1: goto label4;
      case 2: goto label5;
      case 3: goto label6;
      case 4: goto label7;
      case 5: goto label8;
      case 6: goto label9;
      case 7: goto label10;
      default: goto label2;
      };

  label2:
      return;

  label3:
      $arrint = <CommonResources: int[] sonido_notas>;
      $SoundPool = <CommonResources: SoundPool sp>;
      $Context = <MainActivity: Context mContext>;
      $param0 = virtualinvoke $SoundPool.load($Context, 2131034112, 1);
      $arrint[0] = $param0;
      return;

  label4:
      $arrint = <CommonResources: int[] sonido_notas>;
      $SoundPool = <CommonResources: SoundPool sp>;
      $Context = <MainActivity: Context mContext>;
      $param0 = virtualinvoke $SoundPool.load($Context, 2131034113, 1);
      $arrint[1] = $param0;
      return;

  label5:
      $arrint = <CommonResources: int[] sonido_notas>;
      $SoundPool = <CommonResources: SoundPool sp>;
      $Context = <MainActivity: Context mContext>;
      $param0 = virtualinvoke $SoundPool.load($Context, 2131034114, 1);
      $arrint[2] = $param0;
      return;

  label6:
      $arrint = <CommonResources: int[] sonido_notas>;
      $SoundPool = <CommonResources: SoundPool sp>;
      $Context = <MainActivity: Context mContext>;
      $param0 = virtualinvoke $SoundPool.load($Context, 2131034115, 1);
      $arrint[3] = $param0;
      return;

  label7:
      $arrint = <CommonResources: int[] sonido_notas>;
      $SoundPool = <CommonResources: SoundPool sp>;
      $Context = <MainActivity: Context mContext>;
      $param0 = virtualinvoke $SoundPool.load($Context, 2131034116, 1);
      $arrint[4] = $param0;
      return;

  label8:
      $arrint = <CommonResources: int[] sonido_notas>;
      $SoundPool = <CommonResources: SoundPool sp>;
      $Context = <MainActivity: Context mContext>;
      $param0 = virtualinvoke $SoundPool.load($Context, 2131034117, 1);
      $arrint[5] = $param0;
      return;

  label9:
      $arrint = <CommonResources: int[] sonido_notas>;
      $SoundPool = <CommonResources: SoundPool sp>;
      $Context = <MainActivity: Context mContext>;
      $param0 = virtualinvoke $SoundPool.load($Context, 2131034118, 1);
      $arrint[6] = $param0;
      return;

  label10:
      $arrint = <CommonResources: int[] sonido_notas>;
      $SoundPool = <CommonResources: SoundPool sp>;
      $Context = <MainActivity: Context mContext>;
      $param0 = virtualinvoke $SoundPool.load($Context, 2131034119, 1);
      $arrint[7] = $param0;

  label11:
      return;
  }

  public static void doBackAction()
  {
    boolean $z0;
    int $int;
    String $String_Field_txtBack2;
    long $long_Method_currentTimeMillis, $long;
    byte $b3;
    
      $z0 = <CommonResources: boolean displayingMenu>;
      if $z0 != 0 goto label1;
      $int = <CommonResources: int backCounter>;
      $int = $int + 1;
      <CommonResources: int backCounter> = $int;
      $int = <CommonResources: int backCounter>;
      if $int != 1 goto label0;
      $String_Field_txtBack2 = <CommonResources: String txtBack2>;
      staticinvoke CommonResources.showAnimatedText($String_Field_txtBack2, 0);
      return;

  label0:
      $int = <CommonResources: int backCounter>;
      if $int <= 1 goto label2;
      staticinvoke <CommonResources: void showMyMenu(boolean)>(true);
      return;

  label1:
      $long_Method_currentTimeMillis = staticinvoke System.currentTimeMillis();
      $long = <CommonResources: long displayOrderTime>;
      $long = $long + 5000L;
      $b3 = $long cmp $long_Method_currentTimeMillis;
      if $b3 >= 0 goto label2;
      staticinvoke CommonResources.hideMyMenu();

  label2:
      return;
  }

  public static void doExit()
  {
    int $int_Method_myPid;
    
      staticinvoke MainActivity.destroyActions();
      $int_Method_myPid = staticinvoke Process.myPid();
      staticinvoke Process.killProcess($int_Method_myPid);
      staticinvoke System.exit(1);
  }

  public static void hideMyMenu()
  {
    LinearLayout $LinearLayout_Field_layoutmenu;
    
      <CommonResources: boolean displayingMenu> = false;
      <CommonResources: int backCounter> = 0;
      $LinearLayout_Field_layoutmenu = <CommonResources: LinearLayout layoutmenu>;
      virtualinvoke $LinearLayout_Field_layoutmenu.setVisibility(8);
  }

  public static void 'init'(Context $param0, int $param1, int $param2, boolean $param3)
  {
    Bitmap $Bitmap;
    float $f0, $f1;
    Paint $Paint;
    Paint$Align $Paint_Align;
    Resources $Resources;
    Bitmap[] $arrBitmap;
    Piano[] $arrPiano_Field_pianos;
    float[] $arrfloat;
    String $String;
    RectF $RectF;
    LinearGradient $LinearGradient;
    Shader$TileMode $Shader_TileMode_Field_CLAMP;
    DibuNota[] $arrDibuNota_Field_objetosNotas;
    DibuNota $DibuNota;
    LightingColorFilter $LightingColorFilter;
    OutOfMemoryError $OutOfMemoryError;
    Exception $Exception;
    StringBuilder $StringBuilder;
    
      if $param3 == 0 goto label0;
      return;

  label0:
      <CommonResources: Context mContext> = $param0;

  label1:
      if $param0 == null goto label170;
      if $param1 == 0 goto label170;
      if $param2 == 0 goto label170;

  label2:
      staticinvoke System.gc();

  label3:
      $Bitmap = <CommonResources: Bitmap brillo>;

  label4:
      if $Bitmap == null goto label8;

  label5:
      $param3 = <MainActivity: boolean finalMode>;

  label6:
      if $param3 != 0 goto label8;

  label7:
      staticinvoke <Log: int w(String, String)>("CommonResources", "not first init (!)");

  label8:
      <CommonResources: int pWidth> = $param1;
      <CommonResources: int pHeight> = $param2;
      $param1 = <CommonResources: int pWidth>;

  label9:
      $f0 = (float) $param1;
      $f0 = $f0 / 8.0F;

  label10:
      <CommonResources: float tamAnchoTeclaMin> = $f0;
      $param1 = <CommonResources: int pHeight>;

  label11:
      $f0 = (float) $param1;
      $f0 = $f0 / 2.0F;

  label12:
      <CommonResources: float tamAltoTeclaMin> = $f0;
      $param1 = <CommonResources: int pHeight>;

  label13:
      $f0 = (float) $param1;
      $f0 = $f0 / 2.0F;

  label14:
      <CommonResources: float posYteclas> = $f0;
      $Paint = new Paint;

  label15:
      specialinvoke $Paint.<Paint: void <init>()>();

  label16:
      <CommonResources: Paint pincel0> = $Paint;
      $Paint = new Paint;

  label17:
      specialinvoke $Paint.<Paint: void <init>()>();

  label18:
      <CommonResources: Paint pincel1> = $Paint;
      $Paint = <CommonResources: Paint pincel1>;

  label19:
      virtualinvoke $Paint.setAlpha(122);

  label20:
      $Paint = new Paint;

  label21:
      specialinvoke $Paint.<Paint: void <init>()>();

  label22:
      <CommonResources: Paint pincelNormal> = $Paint;
      $Paint = <CommonResources: Paint pincelNormal>;
      $Paint_Align = <Paint$Align: Paint$Align CENTER>;

  label23:
      virtualinvoke $Paint.setTextAlign($Paint_Align);

  label24:
      $Paint = <CommonResources: Paint pincelNormal>;
      $param0 = <CommonResources: Context mContext>;

  label25:
      $Resources = virtualinvoke $param0.getResources();
      $f0 = virtualinvoke $Resources.getDimension(2131230724);
      virtualinvoke $Paint.setTextSize($f0);

  label26:
      $Paint = <CommonResources: Paint pincelNormal>;
      $param0 = <CommonResources: Context mContext>;

  label27:
      $param1 = staticinvoke CommonResources.getColor($param0, 2131296259);
      virtualinvoke $Paint.setColor($param1);

  label28:
      $Paint = new Paint;

  label29:
      specialinvoke $Paint.<Paint: void <init>()>();

  label30:
      <CommonResources: Paint pincelTrans> = $Paint;
      $Paint = <CommonResources: Paint pincelTrans>;
      $param0 = <CommonResources: Context mContext>;

  label31:
      $param1 = staticinvoke CommonResources.getColor($param0, 2131296259);
      virtualinvoke $Paint.setColor($param1);

  label32:
      $Paint = <CommonResources: Paint pincelTrans>;
      $Paint_Align = <Paint$Align: Paint$Align CENTER>;

  label33:
      virtualinvoke $Paint.setTextAlign($Paint_Align);

  label34:
      $Paint = <CommonResources: Paint pincelTrans>;
      $param1 = <CommonResources: int animAlpha>;

  label35:
      virtualinvoke $Paint.setAlpha($param1);

  label36:
      $Paint = <CommonResources: Paint pincelTrans>;
      $param0 = <CommonResources: Context mContext>;

  label37:
      $Resources = virtualinvoke $param0.getResources();
      $f0 = virtualinvoke $Resources.getDimension(2131230724);
      virtualinvoke $Paint.setTextSize($f0);
      staticinvoke CommonResources.resetTeclasPulsadas();
      staticinvoke CommonResources.updateTeclasPulsadasPrev();

  label38:
      $f0 = <CommonResources: float tamAnchoTeclaMin>;

  label39:
      $f0 = $f0 / 2.0F;

  label40:
      <CommonResources: float centroBrillo> = $f0;
      $f0 = <CommonResources: float tamAnchoTeclaMin>;

  label41:
      $f0 = $f0 / 4.0F;

  label42:
      <CommonResources: float centroBrillo2> = $f0;
      $Bitmap = <CommonResources: Bitmap brillo>;

  label43:
      if $Bitmap == null goto label47;

  label44:
      $Bitmap = <CommonResources: Bitmap brillo>;

  label45:
      virtualinvoke $Bitmap.recycle();

  label46:
      <CommonResources: Bitmap brillo> = null;

  label47:
      $f0 = <CommonResources: float tamAnchoTeclaMin>;
      $f1 = <CommonResources: float tamAnchoTeclaMin>;

  label48:
      $Bitmap = staticinvoke CommonResources.getExactSizeBitmapFromResource(2130837512, $f0, $f1);

  label49:
      <CommonResources: Bitmap brillo> = $Bitmap;
      $Bitmap = <CommonResources: Bitmap brillo2>;

  label50:
      if $Bitmap == null goto label54;

  label51:
      $Bitmap = <CommonResources: Bitmap brillo2>;

  label52:
      virtualinvoke $Bitmap.recycle();

  label53:
      <CommonResources: Bitmap brillo2> = null;

  label54:
      $f0 = <CommonResources: float tamAnchoTeclaMin>;

  label55:
      $f0 = $f0 / 2.0F;

  label56:
      $f1 = <CommonResources: float tamAnchoTeclaMin>;

  label57:
      $f1 = $f1 / 2.0F;

  label58:
      $Bitmap = staticinvoke CommonResources.getExactSizeBitmapFromResource(2130837513, $f0, $f1);

  label59:
      <CommonResources: Bitmap brillo2> = $Bitmap;
      $f0 = <CommonResources: float tamAnchoTeclaMin>;

  label60:
      $f0 = $f0 * 1.6666666F;

  label61:
      <CommonResources: float ladoDibuNota> = $f0;
      $f0 = <CommonResources: float ladoDibuNota>;

  label62:
      $f0 = $f0 / 2.0F;

  label63:
      <CommonResources: float despDibuNota> = $f0;
      $param1 = <CommonResources: int pHeight>;

  label64:
      $f0 = (float) $param1;
      $f0 = $f0 * 0.45F;

  label65:
      <CommonResources: float startyDibuNota> = $f0;
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;

  label66:
      $Bitmap = $arrBitmap[0];

  label67:
      if $Bitmap == null goto label73;

  label68:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;

  label69:
      $Bitmap = $arrBitmap[0];

  label70:
      virtualinvoke $Bitmap.recycle();

  label71:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;

  label72:
      $arrBitmap[0] = null;

  label73:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;

  label74:
      $Bitmap = $arrBitmap[1];

  label75:
      if $Bitmap == null goto label81;

  label76:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;

  label77:
      $Bitmap = $arrBitmap[1];

  label78:
      virtualinvoke $Bitmap.recycle();

  label79:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;

  label80:
      $arrBitmap[1] = null;

  label81:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;

  label82:
      $Bitmap = $arrBitmap[2];

  label83:
      if $Bitmap == null goto label89;

  label84:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;

  label85:
      $Bitmap = $arrBitmap[2];

  label86:
      virtualinvoke $Bitmap.recycle();

  label87:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;

  label88:
      $arrBitmap[2] = null;

  label89:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;

  label90:
      $Bitmap = $arrBitmap[3];

  label91:
      if $Bitmap == null goto label97;

  label92:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;

  label93:
      $Bitmap = $arrBitmap[3];

  label94:
      virtualinvoke $Bitmap.recycle();

  label95:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;

  label96:
      $arrBitmap[3] = null;

  label97:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;

  label98:
      $Bitmap = $arrBitmap[4];

  label99:
      if $Bitmap == null goto label105;

  label100:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;

  label101:
      $Bitmap = $arrBitmap[4];

  label102:
      virtualinvoke $Bitmap.recycle();

  label103:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;

  label104:
      $arrBitmap[4] = null;

  label105:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;
      $f0 = <CommonResources: float ladoDibuNota>;
      $f1 = <CommonResources: float ladoDibuNota>;

  label106:
      $Bitmap = staticinvoke CommonResources.getExactSizeBitmapFromResource(2130837559, $f0, $f1);

  label107:
      $arrBitmap[0] = $Bitmap;

  label108:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;
      $f0 = <CommonResources: float ladoDibuNota>;
      $f1 = <CommonResources: float ladoDibuNota>;

  label109:
      $Bitmap = staticinvoke CommonResources.getExactSizeBitmapFromResource(2130837560, $f0, $f1);

  label110:
      $arrBitmap[1] = $Bitmap;

  label111:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;
      $f0 = <CommonResources: float ladoDibuNota>;
      $f1 = <CommonResources: float ladoDibuNota>;

  label112:
      $Bitmap = staticinvoke CommonResources.getExactSizeBitmapFromResource(2130837561, $f0, $f1);

  label113:
      $arrBitmap[2] = $Bitmap;

  label114:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;
      $f0 = <CommonResources: float ladoDibuNota>;
      $f1 = <CommonResources: float ladoDibuNota>;

  label115:
      $Bitmap = staticinvoke CommonResources.getExactSizeBitmapFromResource(2130837562, $f0, $f1);

  label116:
      $arrBitmap[3] = $Bitmap;

  label117:
      $arrBitmap = <CommonResources: Bitmap[] dibuNotas>;
      $f0 = <CommonResources: float ladoDibuNota>;
      $f1 = <CommonResources: float ladoDibuNota>;

  label118:
      $Bitmap = staticinvoke CommonResources.getExactSizeBitmapFromResource(2130837563, $f0, $f1);

  label119:
      $arrBitmap[4] = $Bitmap;

  label120:
      $param1 = 0;

  label121:
      if $param1 >= 8 goto label125;

  label122:
      $arrPiano_Field_pianos = <CommonResources: Piano[] pianos>;

  label123:
      $arrPiano_Field_pianos[$param1] = null;

  label124:
      $param1 = $param1 + 1;
      goto label121;

  label125:
      $param1 = 0;

  label126:
      if $param1 >= 8 goto label131;

  label127:
      $param2 = <CommonResources: int idPianoActivo>;

  label128:
      if $param1 != $param2 goto label130;

  label129:
      staticinvoke CommonResources.initPiano($param1);

  label130:
      $param1 = $param1 + 1;
      goto label126;

  label131:
      $param1 = 0;

  label132:
      if $param1 >= 8 goto label138;

  label133:
      $arrfloat = <CommonResources: float[] ultimaPosTeclaX>;

  label134:
      $arrfloat[$param1] = 0.0F;

  label135:
      $arrfloat = <CommonResources: float[] ultimaPosTeclaY>;

  label136:
      $arrfloat[$param1] = 0.0F;

  label137:
      $param1 = $param1 + 1;
      goto label132;

  label138:
      $param0 = <CommonResources: Context mContext>;

  label139:
      $String = virtualinvoke $param0.getString(2131099698);

  label140:
      <CommonResources: String txtBack1> = $String;
      $param0 = <CommonResources: Context mContext>;

  label141:
      $String = virtualinvoke $param0.getString(2131099699);

  label142:
      <CommonResources: String txtBack2> = $String;
      $RectF = new RectF;
      $param1 = <CommonResources: int pWidth>;

  label143:
      $f0 = (float) $param1;

  label144:
      $param1 = <CommonResources: int pHeight>;

  label145:
      $f1 = (float) $param1;
      $f1 = 2.0F * $f1;
      $f1 = $f1 / 5.0F;

  label146:
      specialinvoke $RectF.<RectF: void <init>(float, float, float, float)>(0.0F, 0.0F, $f0, $f1);

  label147:
      <CommonResources: RectF gradientRect> = $RectF;
      $Paint = new Paint;

  label148:
      specialinvoke $Paint.<Paint: void <init>()>();

  label149:
      <CommonResources: Paint pincelGradiente> = $Paint;
      $LinearGradient = new LinearGradient;
      $param1 = <CommonResources: int pHeight>;

  label150:
      $f0 = (float) $param1;
      $f0 = 2.0F * $f0;
      $f0 = $f0 / 5.0F;

  label151:
      $Shader_TileMode_Field_CLAMP = <Shader$TileMode: Shader$TileMode CLAMP>;

  label152:
      specialinvoke $LinearGradient.<LinearGradient: void <init>(float, float, float, float, int, int, Shader$TileMode)>(0.0F, 0.0F, 0.0F, $f0, -1, -16777216, $Shader_TileMode_Field_CLAMP);

  label153:
      <CommonResources: LinearGradient shader> = $LinearGradient;
      $Paint = <CommonResources: Paint pincelGradiente>;
      $LinearGradient = <CommonResources: LinearGradient shader>;

  label154:
      virtualinvoke $Paint.<Paint: Shader setShader(Shader)>($LinearGradient);

  label155:
      $param1 = 0;

  label156:
      if $param1 >= 10 goto label162;

  label157:
      $arrDibuNota_Field_objetosNotas = <CommonResources: DibuNota[] objetosNotas>;
      $DibuNota = new DibuNota;
      $param0 = <CommonResources: Context mContext>;
      $param2 = <CommonResources: int pHeight>;

  label158:
      $f0 = (float) $param2;

  label159:
      specialinvoke $DibuNota.<DibuNota: void <init>(Context, float)>($param0, $f0);

  label160:
      $arrDibuNota_Field_objetosNotas[$param1] = $DibuNota;

  label161:
      $param1 = $param1 + 1;
      goto label156;

  label162:
      $String = <CommonResources: String txtBack1>;

  label163:
      staticinvoke CommonResources.showAnimatedText($String, 500);

  label164:
      $LightingColorFilter = new LightingColorFilter;

  label165:
      specialinvoke $LightingColorFilter.<LightingColorFilter: void <init>(int, int)>(-256, 50);

  label166:
      <CommonResources: ColorFilter pressedFilter> = $LightingColorFilter;
      <CommonResources: boolean initDone> = true;

  label167:
      return;

  label168:
      $OutOfMemoryError := @caughtexception;
      $param1 = staticinvoke Process.myPid();
      staticinvoke Process.killProcess($param1);
      staticinvoke System.exit(1);
      return;

  label169:
      $Exception := @caughtexception;
      $param3 = <MainActivity: boolean finalMode>;
      if $param3 != 0 goto label170;
      $StringBuilder = new StringBuilder;
      specialinvoke $StringBuilder.<StringBuilder: void <init>()>();
      $StringBuilder = virtualinvoke $StringBuilder.append("Error en init:");
      $String = virtualinvoke $Exception.toString();
      $StringBuilder = virtualinvoke $StringBuilder.append($String);
      $String = virtualinvoke $StringBuilder.toString();
      staticinvoke <Log: int e(String, String)>("CommonResources", $String);

  label170:
      return;

      catch OutOfMemoryError from label0 to label1 with label168;
      catch OutOfMemoryError from label3 to label4 with label168;
      catch OutOfMemoryError from label2 to label3 with label168;
      catch OutOfMemoryError from label5 to label6 with label168;
      catch OutOfMemoryError from label8 to label9 with label168;
      catch OutOfMemoryError from label7 to label8 with label168;
      catch OutOfMemoryError from label10 to label11 with label168;
      catch OutOfMemoryError from label12 to label13 with label168;
      catch OutOfMemoryError from label38 to label39 with label168;
      catch OutOfMemoryError from label37 to label38 with label168;
      catch OutOfMemoryError from label36 to label37 with label168;
      catch OutOfMemoryError from label35 to label36 with label168;
      catch OutOfMemoryError from label34 to label35 with label168;
      catch OutOfMemoryError from label33 to label34 with label168;
      catch OutOfMemoryError from label32 to label33 with label168;
      catch OutOfMemoryError from label31 to label32 with label168;
      catch OutOfMemoryError from label30 to label31 with label168;
      catch OutOfMemoryError from label29 to label30 with label168;
      catch OutOfMemoryError from label28 to label29 with label168;
      catch OutOfMemoryError from label27 to label28 with label168;
      catch OutOfMemoryError from label26 to label27 with label168;
      catch OutOfMemoryError from label25 to label26 with label168;
      catch OutOfMemoryError from label24 to label25 with label168;
      catch OutOfMemoryError from label23 to label24 with label168;
      catch OutOfMemoryError from label22 to label23 with label168;
      catch OutOfMemoryError from label21 to label22 with label168;
      catch OutOfMemoryError from label20 to label21 with label168;
      catch OutOfMemoryError from label19 to label20 with label168;
      catch OutOfMemoryError from label18 to label19 with label168;
      catch OutOfMemoryError from label17 to label18 with label168;
      catch OutOfMemoryError from label16 to label17 with label168;
      catch OutOfMemoryError from label15 to label16 with label168;
      catch OutOfMemoryError from label14 to label15 with label168;
      catch OutOfMemoryError from label40 to label41 with label168;
      catch OutOfMemoryError from label42 to label43 with label168;
      catch OutOfMemoryError from label49 to label50 with label168;
      catch OutOfMemoryError from label48 to label49 with label168;
      catch OutOfMemoryError from label46 to label48 with label168;
      catch OutOfMemoryError from label45 to label46 with label168;
      catch OutOfMemoryError from label44 to label45 with label168;
      catch OutOfMemoryError from label53 to label55 with label168;
      catch OutOfMemoryError from label52 to label53 with label168;
      catch OutOfMemoryError from label51 to label52 with label168;
      catch OutOfMemoryError from label56 to label57 with label168;
      catch OutOfMemoryError from label59 to label60 with label168;
      catch OutOfMemoryError from label58 to label59 with label168;
      catch OutOfMemoryError from label61 to label62 with label168;
      catch OutOfMemoryError from label63 to label64 with label168;
      catch OutOfMemoryError from label65 to label66 with label168;
      catch OutOfMemoryError from label68 to label69 with label168;
      catch OutOfMemoryError from label71 to label72 with label168;
      catch OutOfMemoryError from label70 to label71 with label168;
      catch OutOfMemoryError from label73 to label74 with label168;
      catch OutOfMemoryError from label76 to label77 with label168;
      catch OutOfMemoryError from label79 to label80 with label168;
      catch OutOfMemoryError from label78 to label79 with label168;
      catch OutOfMemoryError from label81 to label82 with label168;
      catch OutOfMemoryError from label84 to label85 with label168;
      catch OutOfMemoryError from label87 to label88 with label168;
      catch OutOfMemoryError from label86 to label87 with label168;
      catch OutOfMemoryError from label89 to label90 with label168;
      catch OutOfMemoryError from label92 to label93 with label168;
      catch OutOfMemoryError from label95 to label96 with label168;
      catch OutOfMemoryError from label94 to label95 with label168;
      catch OutOfMemoryError from label97 to label98 with label168;
      catch OutOfMemoryError from label100 to label101 with label168;
      catch OutOfMemoryError from label103 to label104 with label168;
      catch OutOfMemoryError from label102 to label103 with label168;
      catch OutOfMemoryError from label106 to label107 with label168;
      catch OutOfMemoryError from label105 to label106 with label168;
      catch OutOfMemoryError from label109 to label110 with label168;
      catch OutOfMemoryError from label108 to label109 with label168;
      catch OutOfMemoryError from label112 to label113 with label168;
      catch OutOfMemoryError from label111 to label112 with label168;
      catch OutOfMemoryError from label115 to label116 with label168;
      catch OutOfMemoryError from label114 to label115 with label168;
      catch OutOfMemoryError from label118 to label119 with label168;
      catch OutOfMemoryError from label117 to label118 with label168;
      catch OutOfMemoryError from label122 to label123 with label168;
      catch OutOfMemoryError from label127 to label128 with label168;
      catch OutOfMemoryError from label129 to label130 with label168;
      catch OutOfMemoryError from label133 to label134 with label168;
      catch OutOfMemoryError from label135 to label136 with label168;
      catch OutOfMemoryError from label142 to label143 with label168;
      catch OutOfMemoryError from label141 to label142 with label168;
      catch OutOfMemoryError from label140 to label141 with label168;
      catch OutOfMemoryError from label139 to label140 with label168;
      catch OutOfMemoryError from label138 to label139 with label168;
      catch OutOfMemoryError from label144 to label145 with label168;
      catch OutOfMemoryError from label149 to label150 with label168;
      catch OutOfMemoryError from label148 to label149 with label168;
      catch OutOfMemoryError from label147 to label148 with label168;
      catch OutOfMemoryError from label146 to label147 with label168;
      catch OutOfMemoryError from label153 to label155 with label168;
      catch OutOfMemoryError from label152 to label153 with label168;
      catch OutOfMemoryError from label151 to label152 with label168;
      catch OutOfMemoryError from label157 to label158 with label168;
      catch OutOfMemoryError from label159 to label160 with label168;
      catch OutOfMemoryError from label166 to label167 with label168;
      catch OutOfMemoryError from label165 to label166 with label168;
      catch OutOfMemoryError from label164 to label165 with label168;
      catch OutOfMemoryError from label163 to label164 with label168;
      catch OutOfMemoryError from label162 to label163 with label168;
      catch Exception from label2 to label3 with label169;
      catch Exception from label7 to label8 with label169;
      catch Exception from label15 to label16 with label169;
      catch Exception from label17 to label18 with label169;
      catch Exception from label19 to label20 with label169;
      catch Exception from label21 to label22 with label169;
      catch Exception from label23 to label24 with label169;
      catch Exception from label25 to label26 with label169;
      catch Exception from label27 to label28 with label169;
      catch Exception from label29 to label30 with label169;
      catch Exception from label31 to label32 with label169;
      catch Exception from label33 to label34 with label169;
      catch Exception from label35 to label36 with label169;
      catch Exception from label37 to label38 with label169;
      catch Exception from label45 to label46 with label169;
      catch Exception from label48 to label49 with label169;
      catch Exception from label52 to label53 with label169;
      catch Exception from label58 to label59 with label169;
      catch Exception from label66 to label67 with label169;
      catch Exception from label70 to label71 with label169;
      catch Exception from label69 to label70 with label169;
      catch Exception from label72 to label73 with label169;
      catch Exception from label74 to label75 with label169;
      catch Exception from label78 to label79 with label169;
      catch Exception from label77 to label78 with label169;
      catch Exception from label80 to label81 with label169;
      catch Exception from label82 to label83 with label169;
      catch Exception from label86 to label87 with label169;
      catch Exception from label85 to label86 with label169;
      catch Exception from label88 to label89 with label169;
      catch Exception from label90 to label91 with label169;
      catch Exception from label94 to label95 with label169;
      catch Exception from label93 to label94 with label169;
      catch Exception from label96 to label97 with label169;
      catch Exception from label98 to label99 with label169;
      catch Exception from label102 to label103 with label169;
      catch Exception from label101 to label102 with label169;
      catch Exception from label104 to label105 with label169;
      catch Exception from label107 to label108 with label169;
      catch Exception from label106 to label107 with label169;
      catch Exception from label110 to label111 with label169;
      catch Exception from label109 to label110 with label169;
      catch Exception from label113 to label114 with label169;
      catch Exception from label112 to label113 with label169;
      catch Exception from label116 to label117 with label169;
      catch Exception from label115 to label116 with label169;
      catch Exception from label119 to label120 with label169;
      catch Exception from label118 to label119 with label169;
      catch Exception from label123 to label124 with label169;
      catch Exception from label129 to label130 with label169;
      catch Exception from label134 to label135 with label169;
      catch Exception from label136 to label137 with label169;
      catch Exception from label139 to label140 with label169;
      catch Exception from label141 to label142 with label169;
      catch Exception from label146 to label147 with label169;
      catch Exception from label148 to label149 with label169;
      catch Exception from label152 to label153 with label169;
      catch Exception from label154 to label155 with label169;
      catch Exception from label160 to label161 with label169;
      catch Exception from label159 to label160 with label169;
      catch Exception from label163 to label164 with label169;
      catch Exception from label165 to label166 with label169;
  }

  public static void initPiano(int $param0)
  {
    Piano[] $arrPiano;
    Piano $Piano;
    Context $Context_Field_mContext;
    int $int;
    
      $arrPiano = <CommonResources: Piano[] pianos>;
      $Piano = $arrPiano[$param0];
      if $Piano != null goto label0;
      $arrPiano = <CommonResources: Piano[] pianos>;
      $Piano = new Piano;
      $Context_Field_mContext = <CommonResources: Context mContext>;
      $int = $param0 + 1;
      specialinvoke $Piano.<Piano: void <init>(Context, int)>($Context_Field_mContext, $int);
      $arrPiano[$param0] = $Piano;

  label0:
      return;
  }

  public static void irAlMarketAmigo(Context $param0)
  {
    long $long_Method_currentTimeMillis;
    boolean $z0;
    String $String;
    Intent $Intent;
    Uri $Uri_Method_parse;
    
      $long_Method_currentTimeMillis = staticinvoke System.currentTimeMillis();
      <CommonResources: long deVueltaDeUnAd> = $long_Method_currentTimeMillis;
      $z0 = <CommonResources: boolean isGooglePlayVersion>;
      if $z0 == 0 goto label1;
      $String = "market://search?q=blackdevelopers.net%20baby&utm_source=app&utm_medium=button&utm_campaign=piano";

  label0:
      $Intent = new Intent;
      $Uri_Method_parse = staticinvoke Uri.parse($String);
      specialinvoke $Intent.<Intent: void <init>(String, Uri)>("android.intent.action.VIEW", $Uri_Method_parse);
      virtualinvoke $param0.startActivity($Intent);
      return;

  label1:
      $String = "http://blackdevelopers.net/?page_id=113";
      goto label0;
  }

  public static void irAlMarketNOADS(Context $param0)
  {
    long $long_Method_currentTimeMillis;
    boolean $z0;
    String $String;
    Intent $Intent;
    Uri $Uri_Method_parse;
    
      $long_Method_currentTimeMillis = staticinvoke System.currentTimeMillis();
      <CommonResources: long deVueltaDeUnAd> = $long_Method_currentTimeMillis;
      $z0 = <CommonResources: boolean isGooglePlayVersion>;
      if $z0 == 0 goto label1;
      $String = "market://details?id=com.blackdevelopers.babypianonoads";

  label0:
      $Intent = new Intent;
      $Uri_Method_parse = staticinvoke Uri.parse($String);
      specialinvoke $Intent.<Intent: void <init>(String, Uri)>("android.intent.action.VIEW", $Uri_Method_parse);
      virtualinvoke $param0.startActivity($Intent);
      return;

  label1:
      $String = "http://blackdevelopers.net/?page_id=113";
      goto label0;
  }

  public static void loadLocal(Context $param0)
  {
    SharedPreferences $SharedPreferences_Method_getSharedPreferences;
    boolean $z0;
    int $int_Method_getInt;
    long $long_Method_getLong;
    
      $SharedPreferences_Method_getSharedPreferences = virtualinvoke $param0.getSharedPreferences("BlackDevelopers_BabyPiano", 0);
      $z0 = interfaceinvoke $SharedPreferences_Method_getSharedPreferences.<SharedPreferences: boolean getBoolean(String, boolean)>("vibrationEnabled", false);
      <CommonResources: boolean vibrationEnabled> = $z0;
      $int_Method_getInt = interfaceinvoke $SharedPreferences_Method_getSharedPreferences.getInt("idPianoActivo", 7);
      <CommonResources: int idPianoActivo> = $int_Method_getInt;
      $long_Method_getLong = interfaceinvoke $SharedPreferences_Method_getSharedPreferences.getLong("deVueltaDeUnAd", 0L);
      <CommonResources: long deVueltaDeUnAd> = $long_Method_getLong;
  }

  public static void ponerDibuNota(int $param0, float $param1)
  {
    DibuNota[] $arrDibuNota_Field_objetosNotas;
    int $int;
    DibuNota $DibuNota;
    float $f1;
    
      $arrDibuNota_Field_objetosNotas = <CommonResources: DibuNota[] objetosNotas>;
      $int = <CommonResources: int turnoDibuNota>;
      $DibuNota = $arrDibuNota_Field_objetosNotas[$int];
      $int = <CommonResources: int pHeight>;
      $f1 = (float) $int;
      $f1 = $f1 / 2.0F;
      virtualinvoke $DibuNota.posicionarSemiAzar($param1, $f1, $param0);
      $param0 = <CommonResources: int turnoDibuNota>;
      $param0 = $param0 + 1;
      <CommonResources: int turnoDibuNota> = $param0;
      $param0 = <CommonResources: int turnoDibuNota>;
      if $param0 < 10 goto label0;
      <CommonResources: int turnoDibuNota> = 0;

  label0:
      return;
  }

  public static void procesarCambiosEnTeclas()
  {
    int $int_1, $int;
    Piano[] $arrPiano_Field_pianos;
    Piano $Piano;
    boolean[] $arrboolean;
    boolean $z0;
    
      $int_1 = 0;

  label0:
      $arrPiano_Field_pianos = <CommonResources: Piano[] pianos>;
      $int = <CommonResources: int idPianoActivo>;
      $Piano = $arrPiano_Field_pianos[$int];
      $int = $Piano.<Piano: int numTeclas>;
      if $int_1 >= $int goto label2;
      $arrboolean = <CommonResources: boolean[] teclaPulsada>;
      $z0 = $arrboolean[$int_1];
      if $z0 == 0 goto label1;
      $arrboolean = <CommonResources: boolean[] teclaPulsadaPrev>;
      $z0 = $arrboolean[$int_1];
      if $z0 != 0 goto label1;
      staticinvoke CommonResources.tocarTecla($int_1);

  label1:
      $int_1 = $int_1 + 1;
      goto label0;

  label2:
      return;
  }

  public static void pulsarTeclaXY(float $param0, float $param1)
  {
    float $f2, $f3;
    byte $b0;
    Piano[] $arrPiano;
    int $int, $int_1, $int_2;
    Piano $Piano;
    float[] $arrfloat;
    boolean[] $arrboolean_Field_teclaPulsada;
    Exception $Exception;
    boolean $z0;
    StringBuilder $StringBuilder;
    String $String;
    
      $f2 = <CommonResources: float posYteclas>;
      $b0 = $param1 cmpl $f2;
      if $b0 <= 0 goto label18;
      $arrPiano = <CommonResources: Piano[] pianos>;
      $int = <CommonResources: int idPianoActivo>;

  label0:
      $Piano = $arrPiano[$int];
      $int = $Piano.<Piano: int numTeclas>;

  label1:
      $int = $int + -1;
      $int_1 = 0;

  label2:
      $arrPiano = <CommonResources: Piano[] pianos>;
      $int_2 = <CommonResources: int idPianoActivo>;

  label3:
      $Piano = $arrPiano[$int_2];
      $int_2 = $Piano.<Piano: int numTeclas>;

  label4:
      $int_2 = $int_2 + -1;
      if $int_1 >= $int_2 goto label7;
      $f2 = (float) $int_1;
      $f2 = $f2 + 1.0F;
      $arrPiano = <CommonResources: Piano[] pianos>;
      $int_2 = <CommonResources: int idPianoActivo>;

  label5:
      $Piano = $arrPiano[$int_2];
      $f3 = $Piano.<Piano: float tamAnchoTecla>;

  label6:
      $f2 = $f3 * $f2;
      $b0 = $param0 cmpg $f2;
      if $b0 >= 0 goto label16;
      $int = $int_1;

  label7:
      $int_1 = $int;
      if $int >= 0 goto label8;
      $int_1 = 0;

  label8:
      $int = <CommonResources: int idPianoActivo>;
      if $int_1 <= $int goto label9;
      $int_1 = <CommonResources: int idPianoActivo>;

  label9:
      $arrfloat = <CommonResources: float[] ultimaPosTeclaX>;

  label10:
      $arrfloat[$int_1] = $param0;

  label11:
      $arrfloat = <CommonResources: float[] ultimaPosTeclaY>;

  label12:
      $arrfloat[$int_1] = $param1;

  label13:
      $arrboolean_Field_teclaPulsada = <CommonResources: boolean[] teclaPulsada>;

  label14:
      $arrboolean_Field_teclaPulsada[$int_1] = true;

  label15:
      return;

  label16:
      $int_1 = $int_1 + 1;
      goto label2;

  label17:
      $Exception := @caughtexception;
      $z0 = <MainActivity: boolean finalMode>;
      if $z0 != 0 goto label18;
      $StringBuilder = new StringBuilder;
      specialinvoke $StringBuilder.<StringBuilder: void <init>()>();
      $StringBuilder = virtualinvoke $StringBuilder.append("Error en pulsarTeclaXY() :");
      $String = virtualinvoke $Exception.toString();
      $StringBuilder = virtualinvoke $StringBuilder.append($String);
      $String = virtualinvoke $StringBuilder.toString();
      staticinvoke <Log: int e(String, String)>("CommonResources", $String);

  label18:
      return;

      catch Exception from label0 to label1 with label17;
      catch Exception from label3 to label4 with label17;
      catch Exception from label5 to label6 with label17;
      catch Exception from label10 to label11 with label17;
      catch Exception from label12 to label13 with label17;
      catch Exception from label14 to label15 with label17;
  }

  public static void resetTeclasPulsadas()
  {
    int $int;
    boolean[] $arrboolean_Field_teclaPulsada;
    
      $int = 0;

  label0:
      if $int >= 8 goto label1;
      $arrboolean_Field_teclaPulsada = <CommonResources: boolean[] teclaPulsada>;
      $arrboolean_Field_teclaPulsada[$int] = false;
      $int = $int + 1;
      goto label0;

  label1:
      return;
  }

  @Visibility(retention="SOURCE", annotations= { element = @android.'annotation'.SuppressLint(
value= { 
value="CommitPrefEdits" } )
 })
  public static void saveLocal(Context $param0, boolean $param1)
  {
    SharedPreferences $SharedPreferences_Method_getSharedPreferences;
    SharedPreferences$Editor $SharedPreferences_Editor_Method_edit;
    boolean $z1;
    int $int_Field_idPianoActivo;
    long $long_Field_deVueltaDeUnAd;
    
      $SharedPreferences_Method_getSharedPreferences = virtualinvoke $param0.getSharedPreferences("BlackDevelopers_BabyPiano", 0);
      $SharedPreferences_Editor_Method_edit = interfaceinvoke $SharedPreferences_Method_getSharedPreferences.edit();
      $z1 = <CommonResources: boolean vibrationEnabled>;
      interfaceinvoke $SharedPreferences_Editor_Method_edit.<SharedPreferences$Editor: SharedPreferences$Editor putBoolean(String, boolean)>("vibrationEnabled", $z1);
      $int_Field_idPianoActivo = <CommonResources: int idPianoActivo>;
      interfaceinvoke $SharedPreferences_Editor_Method_edit.<SharedPreferences$Editor: SharedPreferences$Editor putInt(String, int)>("idPianoActivo", $int_Field_idPianoActivo);
      $long_Field_deVueltaDeUnAd = <CommonResources: long deVueltaDeUnAd>;
      interfaceinvoke $SharedPreferences_Editor_Method_edit.<SharedPreferences$Editor: SharedPreferences$Editor putLong(String, long)>("deVueltaDeUnAd", $long_Field_deVueltaDeUnAd);
      if $param1 != 0 goto label0;
      interfaceinvoke $SharedPreferences_Editor_Method_edit.apply();
      return;

  label0:
      interfaceinvoke $SharedPreferences_Editor_Method_edit.<SharedPreferences$Editor: boolean commit()>();
  }

  public static void seleccionarOpcionTeclas(int $param0)
  {
    int $int;
    Button[] $arrButton;
    Button $Button;
    Drawable $Drawable;
    ColorFilter $ColorFilter_Field_pressedFilter;
    
      $int = 0;

  label0:
      if $int >= 8 goto label3;
      if $int != $param0 goto label2;
      $arrButton = <CommonResources: Button[] btnTeclas>;
      $Button = $arrButton[$int];
      $Drawable = virtualinvoke $Button.getBackground();
      $ColorFilter_Field_pressedFilter = <CommonResources: ColorFilter pressedFilter>;
      virtualinvoke $Drawable.setColorFilter($ColorFilter_Field_pressedFilter);

  label1:
      $int = $int + 1;
      goto label0;

  label2:
      $arrButton = <CommonResources: Button[] btnTeclas>;
      $Button = $arrButton[$int];
      $Drawable = virtualinvoke $Button.getBackground();
      virtualinvoke $Drawable.<Drawable: void setColorFilter(ColorFilter)>(null);
      goto label1;

  label3:
      return;
  }

  public static void seleccionarOpcionVibracion(boolean $param0)
  {
    Button $Button;
    Drawable $Drawable;
    ColorFilter $ColorFilter;
    
      if $param0 == 0 goto label0;
      $Button = <CommonResources: Button btnVibrationON>;
      $Drawable = virtualinvoke $Button.getBackground();
      $ColorFilter = <CommonResources: ColorFilter pressedFilter>;
      virtualinvoke $Drawable.setColorFilter($ColorFilter);
      $Button = <CommonResources: Button btnVibrationOFF>;
      $Drawable = virtualinvoke $Button.getBackground();
      virtualinvoke $Drawable.<Drawable: void setColorFilter(ColorFilter)>(null);
      return;

  label0:
      $Button = <CommonResources: Button btnVibrationON>;
      $Drawable = virtualinvoke $Button.getBackground();
      virtualinvoke $Drawable.<Drawable: void setColorFilter(ColorFilter)>(null);
      $Button = <CommonResources: Button btnVibrationOFF>;
      $Drawable = virtualinvoke $Button.getBackground();
      $ColorFilter = <CommonResources: ColorFilter pressedFilter>;
      virtualinvoke $Drawable.setColorFilter($ColorFilter);
  }

  public static void showAnimatedText(String $param0, int $param1)
  {
    float $f0;
    Exception $Exception;
    boolean $z0;
    StringBuilder $StringBuilder;
    
      $param1 = $param1 / 40;
      $f0 = (float) $param1;

  label0:
      $param1 = staticinvoke Math.round($f0);

  label1:
      $param1 = 0 - $param1;
      <CommonResources: String currentAnimText> = $param0;
      <CommonResources: int textAnimStep> = $param1;

  label2:
      $param1 = <CommonResources: int textAnimStep>;
      staticinvoke CommonResources.updateTransparency($param1);
      return;

  label3:
      $Exception := @caughtexception;
      <CommonResources: int textAnimStep> = 0;
      $z0 = <MainActivity: boolean finalMode>;
      if $z0 != 0 goto label2;
      $StringBuilder = new StringBuilder;
      specialinvoke $StringBuilder.<StringBuilder: void <init>()>();
      $StringBuilder = virtualinvoke $StringBuilder.append("Error en showAnimatedText:");
      $param0 = virtualinvoke $Exception.toString();
      $StringBuilder = virtualinvoke $StringBuilder.append($param0);
      $param0 = virtualinvoke $StringBuilder.toString();
      staticinvoke <Log: int e(String, String)>("CommonResources", $param0);
      goto label2;

      catch Exception from label0 to label1 with label3;
  }

  public static void showMyMenu(boolean $param0)
  {
    boolean $z1;
    int $int_Field_idPianoActivo;
    long $long_Method_currentTimeMillis;
    Button $Button;
    LinearLayout $LinearLayout_Field_layoutmenu;
    
      $z1 = <CommonResources: boolean vibrationEnabled>;
      staticinvoke CommonResources.seleccionarOpcionVibracion($z1);
      $int_Field_idPianoActivo = <CommonResources: int idPianoActivo>;
      staticinvoke CommonResources.seleccionarOpcionTeclas($int_Field_idPianoActivo);
      if $param0 == 0 goto label0;
      staticinvoke API_PubliOptimizada.mostrarPublicidaddINTER2();

  label0:
      $long_Method_currentTimeMillis = staticinvoke System.currentTimeMillis();
      <CommonResources: long displayOrderTime> = $long_Method_currentTimeMillis;
      staticinvoke CommonResources.showAnimatedText("", 0);
      <CommonResources: boolean displayingMenu> = true;
      $param0 = <API_PubliOptimizada: boolean no_ads>;
      if $param0 == 0 goto label1;
      $Button = <CommonResources: Button btnPurchase>;
      virtualinvoke $Button.setVisibility(4);

  label1:
      $param0 = <CommonResources: boolean canShowPurchaseButton>;
      if $param0 != 0 goto label2;
      $Button = <CommonResources: Button btnPurchase>;
      virtualinvoke $Button.setVisibility(4);

  label2:
      $LinearLayout_Field_layoutmenu = <CommonResources: LinearLayout layoutmenu>;
      virtualinvoke $LinearLayout_Field_layoutmenu.setVisibility(0);
  }

  public static void tocarTecla(int $param0)
  {
    SoundPool $SoundPool;
    boolean[] $arrboolean;
    boolean $z0;
    int[] $arrint_Field_sonido_notas;
    int $int;
    StringBuilder $StringBuilder;
    String $String;
    Context $Context_Field_mContext;
    Object $Object_Method_getSystemService;
    Vibrator $Vibrator;
    Exception $Exception, $Exception_1;
    float[] $arrfloat_Field_ultimaPosTeclaX;
    float $f0;
    
      $SoundPool = <CommonResources: SoundPool sp>;
      if $SoundPool == null goto label15;
      $arrboolean = <CommonResources: boolean[] soundLoaded>;
      $z0 = $arrboolean[$param0];
      if $z0 != 0 goto label0;
      staticinvoke CommonResources.cargarSonido($param0);
      return;

  label0:
      $SoundPool = <CommonResources: SoundPool sp>;
      $arrint_Field_sonido_notas = <CommonResources: int[] sonido_notas>;

  label1:
      $int = $arrint_Field_sonido_notas[$param0];
      $int = virtualinvoke $SoundPool.play($int, 1.0F, 1.0F, 100, 0, 1.0F);

  label2:
      if $int != 0 goto label11;
      $arrboolean = <CommonResources: boolean[] soundLoaded>;

  label3:
      $arrboolean[$param0] = false;

  label4:
      $z0 = <MainActivity: boolean finalMode>;
      if $z0 != 0 goto label6;
      $StringBuilder = new StringBuilder;

  label5:
      specialinvoke $StringBuilder.<StringBuilder: void <init>()>();
      $StringBuilder = virtualinvoke $StringBuilder.append("Recargando sonido tecla ");
      $String = staticinvoke String.valueOf($param0);
      $StringBuilder = virtualinvoke $StringBuilder.append($String);
      $String = virtualinvoke $StringBuilder.toString();
      staticinvoke <Log: int w(String, String)>("CommonResources", $String);

  label6:
      staticinvoke CommonResources.cargarSonido($param0);

  label7:
      $z0 = <CommonResources: boolean vibrationEnabled>;
      if $z0 == 0 goto label15;
      $Context_Field_mContext = <MainActivity: Context mContext>;

  label8:
      $Object_Method_getSystemService = virtualinvoke $Context_Field_mContext.getSystemService("vibrator");
      $Vibrator = (Vibrator) $Object_Method_getSystemService;
      virtualinvoke $Vibrator.vibrate(300L);

  label9:
      return;

  label10:
      $Exception := @caughtexception;
      $z0 = <MainActivity: boolean finalMode>;
      if $z0 != 0 goto label15;
      $StringBuilder = new StringBuilder;
      specialinvoke $StringBuilder.<StringBuilder: void <init>()>();
      $StringBuilder = virtualinvoke $StringBuilder.append("Imposible vibrar. Error = ");
      $String = virtualinvoke $Exception.toString();
      $StringBuilder = virtualinvoke $StringBuilder.append($String);
      $String = virtualinvoke $StringBuilder.toString();
      staticinvoke <Log: int e(String, String)>("CommonResources", $String);
      return;

  label11:
      $arrfloat_Field_ultimaPosTeclaX = <CommonResources: float[] ultimaPosTeclaX>;

  label12:
      $f0 = $arrfloat_Field_ultimaPosTeclaX[$param0];
      staticinvoke CommonResources.ponerDibuNota($param0, $f0);

  label13:
      goto label7;

  label14:
      $Exception_1 := @caughtexception;
      $z0 = <MainActivity: boolean finalMode>;
      if $z0 != 0 goto label7;
      $StringBuilder = new StringBuilder;
      specialinvoke $StringBuilder.<StringBuilder: void <init>()>();
      $StringBuilder = virtualinvoke $StringBuilder.append("No se puede tocar tecla ");
      $String = staticinvoke String.valueOf($param0);
      $StringBuilder = virtualinvoke $StringBuilder.append($String);
      $StringBuilder = virtualinvoke $StringBuilder.append(". Error = ");
      $String = virtualinvoke $Exception_1.toString();
      $StringBuilder = virtualinvoke $StringBuilder.append($String);
      $String = virtualinvoke $StringBuilder.toString();
      staticinvoke <Log: int e(String, String)>("CommonResources", $String);
      goto label7;

  label15:
      return;

      catch Exception from label1 to label2 with label14;
      catch Exception from label3 to label4 with label14;
      catch Exception from label5 to label7 with label14;
      catch Exception from label8 to label9 with label10;
      catch Exception from label12 to label13 with label14;
  }

  public static void updateTeclasPulsadasPrev()
  {
    int $int;
    boolean[] $arrboolean_Field_teclaPulsadaPrev, $arrboolean_Field_teclaPulsada;
    boolean $z0;
    Exception $Exception;
    StringBuilder $StringBuilder;
    String $String;
    
      $int = 0;

  label0:
      if $int >= 8 goto label4;
      $arrboolean_Field_teclaPulsadaPrev = <CommonResources: boolean[] teclaPulsadaPrev>;
      $arrboolean_Field_teclaPulsada = <CommonResources: boolean[] teclaPulsada>;

  label1:
      $z0 = $arrboolean_Field_teclaPulsada[$int];
      $arrboolean_Field_teclaPulsadaPrev[$int] = $z0;

  label2:
      $int = $int + 1;
      goto label0;

  label3:
      $Exception := @caughtexception;
      $z0 = <MainActivity: boolean finalMode>;
      if $z0 != 0 goto label4;
      $StringBuilder = new StringBuilder;
      specialinvoke $StringBuilder.<StringBuilder: void <init>()>();
      $StringBuilder = virtualinvoke $StringBuilder.append("Error en updateTeclasPulsadasPrev() :");
      $String = virtualinvoke $Exception.toString();
      $StringBuilder = virtualinvoke $StringBuilder.append($String);
      $String = virtualinvoke $StringBuilder.toString();
      staticinvoke <Log: int e(String, String)>("CommonResources", $String);

  label4:
      return;

      catch Exception from label1 to label2 with label3;
  }

  public static void updateTransparency(int $param0)
  {
    short $s1;
    Paint $Paint;
    Exception $Exception;
    boolean $z0;
    StringBuilder $StringBuilder;
    String $String;
    
      $s1 = 0;
      if $param0 >= 0 goto label3;
      $s1 = 0;

  label0:
      <CommonResources: int animAlpha> = $s1;
      $Paint = <CommonResources: Paint pincelTrans>;
      if $Paint == null goto label29;
      $Paint = <CommonResources: Paint pincelTrans>;

  label1:
      virtualinvoke $Paint.<Paint: void setAlpha(int)>($s1);

  label2:
      return;

  label3:
      if $param0 > 5 goto label11;
      lookupswitch ($param0) {
      case 0: goto label5;
      case 1: goto label6;
      case 2: goto label7;
      case 3: goto label8;
      case 4: goto label9;
      case 5: goto label10;
      default: goto label4;
      };

  label4:
      goto label0;

  label5:
      $s1 = 0;
      goto label0;

  label6:
      $s1 = 40;
      goto label0;

  label7:
      $s1 = 80;
      goto label0;

  label8:
      $s1 = 120;
      goto label0;

  label9:
      $s1 = 160;
      goto label0;

  label10:
      $s1 = 200;
      goto label0;

  label11:
      if $param0 <= 5 goto label12;
      if $param0 > 140 goto label12;
      $s1 = 255;
      goto label0;

  label12:
      if $param0 <= 140 goto label26;
      if $param0 >= 153 goto label26;
      lookupswitch ($param0) {
      case 141: goto label14;
      case 142: goto label15;
      case 143: goto label16;
      case 144: goto label17;
      case 145: goto label18;
      case 146: goto label19;
      case 147: goto label20;
      case 148: goto label21;
      case 149: goto label22;
      case 150: goto label23;
      case 151: goto label24;
      case 152: goto label25;
      default: goto label13;
      };

  label13:
      goto label0;

  label14:
      $s1 = 240;
      goto label0;

  label15:
      $s1 = 220;
      goto label0;

  label16:
      $s1 = 200;
      goto label0;

  label17:
      $s1 = 180;
      goto label0;

  label18:
      $s1 = 160;
      goto label0;

  label19:
      $s1 = 140;
      goto label0;

  label20:
      $s1 = 120;
      goto label0;

  label21:
      $s1 = 100;
      goto label0;

  label22:
      $s1 = 80;
      goto label0;

  label23:
      $s1 = 60;
      goto label0;

  label24:
      $s1 = 40;
      goto label0;

  label25:
      $s1 = 20;
      goto label0;

  label26:
      if $param0 != 153 goto label27;
      <CommonResources: int backCounter> = 0;
      $s1 = 0;
      goto label0;

  label27:
      $s1 = 0;
      goto label0;

  label28:
      $Exception := @caughtexception;
      $z0 = <MainActivity: boolean finalMode>;
      if $z0 != 0 goto label29;
      $StringBuilder = new StringBuilder;
      specialinvoke $StringBuilder.<StringBuilder: void <init>()>();
      $StringBuilder = virtualinvoke $StringBuilder.append("Error en updateTransparency:");
      $String = virtualinvoke $Exception.toString();
      $StringBuilder = virtualinvoke $StringBuilder.append($String);
      $String = virtualinvoke $StringBuilder.toString();
      staticinvoke <Log: int e(String, String)>("CommonResources", $String);

  label29:
      return;

      catch Exception from label1 to label2 with label28;
  }

}